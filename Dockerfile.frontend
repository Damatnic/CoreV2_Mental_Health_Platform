# Multi-stage Dockerfile for Mental Health Platform Frontend
# Optimized for production deployment with static asset serving

# ================================
# Build Stage
# ================================
FROM node:20-alpine AS builder

# Set build arguments
ARG NODE_ENV=production
ARG BUILD_DATE
ARG BUILD_VERSION
ARG VITE_API_URL=https://api.mentalhealthplatform.com
ARG VITE_WS_URL=wss://api.mentalhealthplatform.com/ws
ARG VITE_ENVIRONMENT=production

# Add build metadata
LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.version=$BUILD_VERSION \
      org.opencontainers.image.title="Mental Health Platform Frontend" \
      org.opencontainers.image.description="React frontend for mental health platform with crisis intervention UI" \
      org.opencontainers.image.vendor="Mental Health Platform Team" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/mental-health-platform/frontend"

# Create app directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY vite.config.ts ./
COPY tsconfig.json ./
COPY tsconfig.node.json ./
COPY index.html ./

# Install dependencies
RUN npm ci --no-audit --no-fund

# Copy source code
COPY src/ ./src/
COPY public/ ./public/

# Set build environment variables
ENV NODE_ENV=production \
    VITE_API_URL=$VITE_API_URL \
    VITE_WS_URL=$VITE_WS_URL \
    VITE_ENVIRONMENT=$VITE_ENVIRONMENT \
    GENERATE_SOURCEMAP=false

# Build the application
RUN npm run build

# ================================
# Production Stage with Nginx
# ================================
FROM nginx:1.25-alpine AS production

# Install security updates
RUN apk update && \
    apk upgrade && \
    apk add --no-cache \
        curl \
        ca-certificates && \
    rm -rf /var/cache/apk/*

# Remove default nginx config
RUN rm -rf /usr/share/nginx/html/* && \
    rm /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY --chown=nginx:nginx nginx/nginx.conf /etc/nginx/nginx.conf
COPY --chown=nginx:nginx nginx/mime.types /etc/nginx/mime.types

# Create nginx configuration for mental health platform
RUN cat > /etc/nginx/conf.d/mental-health.conf << 'EOF'
server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # HIPAA Compliance headers
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: https:; font-src 'self'; object-src 'none'; media-src 'self';" always;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        application/javascript
        application/json
        application/xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Static asset caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }
    
    # Service worker - no caching
    location /sw.js {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        try_files $uri =404;
    }
    
    # Crisis resources - always fresh
    location ~* \.(json)$ {
        add_header Cache-Control "no-cache, must-revalidate";
        try_files $uri =404;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"healthy","service":"frontend","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}';
        add_header Content-Type application/json;
    }
    
    # Handle client-side routing
    location / {
        try_files $uri $uri/ /index.html;
        
        # Prevent caching of index.html
        location = /index.html {
            add_header Cache-Control "no-cache, must-revalidate";
            expires 0;
        }
    }
    
    # Offline page for PWA
    location /offline.html {
        add_header Cache-Control "no-cache, must-revalidate";
        expires 0;
        try_files $uri =404;
    }
    
    # Crisis offline page (critical)
    location /offline-crisis.html {
        add_header Cache-Control "no-cache, must-revalidate";
        expires 0;
        try_files $uri =404;
    }
    
    # Security - deny access to sensitive files
    location ~ /\. {
        deny all;
    }
    
    location ~* \.(env|log|ini)$ {
        deny all;
    }
    
    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
EOF

# Create directory structure and set permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/cache/nginx /var/log/nginx /var/run/nginx.pid /usr/share/nginx/html

# Switch to nginx user
USER nginx

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]