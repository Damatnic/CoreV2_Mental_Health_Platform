apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: mental-health-platform
  labels:
    app: prometheus
    component: monitoring
    tier: observability

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
    component: monitoring
    tier: observability
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus
    component: monitoring
    tier: observability
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: mental-health-platform

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: mental-health-platform
  labels:
    app: prometheus
    component: monitoring
    tier: observability
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'mental-health-platform'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    scrape_configs:
    # Mental Health Platform Backend
    - job_name: 'mental-health-backend'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - mental-health-platform
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: backend-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      metrics_path: '/metrics'
      scrape_interval: 5s

    # Crisis Detection Service
    - job_name: 'crisis-detector'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - mental-health-platform
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: backend-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: crisis-api
      metrics_path: '/metrics'
      scrape_interval: 5s

    # PostgreSQL Database
    - job_name: 'postgresql'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - mental-health-platform
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: postgresql-primary-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      metrics_path: '/metrics'
      scrape_interval: 30s

    # Redis
    - job_name: 'redis'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - mental-health-platform
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: redis-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      metrics_path: '/metrics'
      scrape_interval: 30s

    # Nginx Ingress Controller
    - job_name: 'nginx-ingress'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - ingress-nginx
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        action: keep
        regex: ingress-nginx
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+)
        replacement: ${1}:10254

    # Kubernetes API Server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

    # Kubernetes Nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

    # Kubernetes Pods
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - mental-health-platform
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  alert_rules.yml: |
    groups:
    - name: mental-health-critical
      rules:
      # Crisis System Alerts
      - alert: CrisisSystemDown
        expr: up{job="crisis-detector"} == 0
        for: 30s
        labels:
          severity: critical
          team: crisis-response
          service: crisis-detection
        annotations:
          summary: "Crisis detection system is down"
          description: "The crisis detection system has been down for more than 30 seconds. This is a life-critical service."
          runbook_url: "https://docs.mentalhealthplatform.com/runbooks/crisis-system-down"
          dashboard_url: "https://monitoring.mentalhealthplatform.com/d/crisis-overview"

      - alert: CrisisResponseTimeHigh
        expr: histogram_quantile(0.95, rate(crisis_response_duration_seconds_bucket[5m])) > 2
        for: 1m
        labels:
          severity: critical
          team: crisis-response
          service: crisis-detection
        annotations:
          summary: "Crisis response time is too high"
          description: "95th percentile crisis response time is {{ $value }}s, which exceeds the 2s threshold"

      - alert: CrisisRequestErrors
        expr: rate(crisis_requests_total{status=~"5.."}[5m]) > 0.01
        for: 1m
        labels:
          severity: critical
          team: crisis-response
          service: crisis-detection
        annotations:
          summary: "High error rate in crisis system"
          description: "Crisis system error rate is {{ $value | humanizePercentage }}"

      # Application Health Alerts
      - alert: BackendDown
        expr: up{job="mental-health-backend"} == 0
        for: 1m
        labels:
          severity: critical
          team: platform
          service: backend
        annotations:
          summary: "Mental Health Platform backend is down"
          description: "Backend service has been down for more than 1 minute"

      - alert: DatabaseConnectionPoolExhausted
        expr: postgresql_connections_active / postgresql_connections_max > 0.9
        for: 2m
        labels:
          severity: critical
          team: platform
          service: database
        annotations:
          summary: "Database connection pool nearly exhausted"
          description: "Database connection pool is {{ $value | humanizePercentage }} full"

      - alert: HighMemoryUsage
        expr: container_memory_working_set_bytes / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "High memory usage detected"
          description: "Container {{ $labels.container }} in pod {{ $labels.pod }} is using {{ $value | humanizePercentage }} of its memory limit"

      - alert: HighCPUUsage
        expr: rate(container_cpu_usage_seconds_total[5m]) / (container_spec_cpu_quota / container_spec_cpu_period) > 0.9
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "High CPU usage detected"
          description: "Container {{ $labels.container }} in pod {{ $labels.pod }} is using {{ $value | humanizePercentage }} of its CPU limit"

      # Database Health Alerts
      - alert: DatabaseDown
        expr: up{job="postgresql"} == 0
        for: 30s
        labels:
          severity: critical
          team: platform
          service: database
        annotations:
          summary: "PostgreSQL database is down"
          description: "PostgreSQL database has been unreachable for more than 30 seconds"

      - alert: DatabaseReplicationLag
        expr: postgresql_replication_lag_seconds > 10
        for: 2m
        labels:
          severity: warning
          team: platform
          service: database
        annotations:
          summary: "Database replication lag is high"
          description: "Replication lag is {{ $value }}s"

      - alert: DatabaseSlowQueries
        expr: rate(postgresql_slow_queries_total[5m]) > 0.1
        for: 2m
        labels:
          severity: warning
          team: platform
          service: database
        annotations:
          summary: "High rate of slow database queries"
          description: "Slow query rate is {{ $value }} queries/second"

      # Redis Health Alerts
      - alert: RedisDown
        expr: up{job="redis"} == 0
        for: 1m
        labels:
          severity: critical
          team: platform
          service: cache
        annotations:
          summary: "Redis cache is down"
          description: "Redis has been unreachable for more than 1 minute"

      - alert: RedisMemoryUsageHigh
        expr: redis_memory_used_bytes / redis_memory_max_bytes > 0.9
        for: 5m
        labels:
          severity: warning
          team: platform
          service: cache
        annotations:
          summary: "Redis memory usage is high"
          description: "Redis memory usage is {{ $value | humanizePercentage }}"

      # Load Balancer and Traffic Alerts
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
        for: 2m
        labels:
          severity: critical
          team: platform
          service: frontend
        annotations:
          summary: "High HTTP error rate"
          description: "HTTP error rate is {{ $value | humanizePercentage }}"

      - alert: HighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2
        for: 2m
        labels:
          severity: warning
          team: platform
          service: frontend
        annotations:
          summary: "High HTTP response latency"
          description: "95th percentile latency is {{ $value }}s"

      # Kubernetes Resource Alerts
      - alert: PodCrashLooping
        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "Pod is crash looping"
          description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is crash looping"

      - alert: PersistentVolumeClaimPending
        expr: kube_persistentvolumeclaim_status_phase{phase="Pending"} == 1
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "PVC is in pending state"
          description: "PVC {{ $labels.persistentvolumeclaim }} in namespace {{ $labels.namespace }} is pending"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: mental-health-platform
  labels:
    app: prometheus
    component: monitoring
    tier: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: monitoring
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
        tier: observability
      annotations:
        prometheus.io/scrape: "false"
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        runAsNonRoot: true
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--storage.tsdb.retention.time=30d'
          - '--storage.tsdb.retention.size=50GB'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
          - '--query.max-concurrency=20'
        ports:
        - containerPort: 9090
          name: web
          protocol: TCP
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
          readOnly: true
        - name: prometheus-data
          mountPath: /prometheus/
        - name: rules-config
          mountPath: /etc/prometheus/rules/
          readOnly: true
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
          items:
          - key: prometheus.yml
            path: prometheus.yml
      - name: rules-config
        configMap:
          name: prometheus-config
          items:
          - key: alert_rules.yml
            path: alert_rules.yml
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data-pvc
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: mental-health-platform
  labels:
    app: prometheus
    component: monitoring
    tier: observability
  annotations:
    prometheus.io/scrape: "false"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    name: web
    protocol: TCP
  selector:
    app: prometheus
    component: monitoring

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data-pvc
  namespace: mental-health-platform
  labels:
    app: prometheus
    component: monitoring
    tier: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd