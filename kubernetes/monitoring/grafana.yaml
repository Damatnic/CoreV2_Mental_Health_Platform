apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: mental-health-platform
  labels:
    app: grafana
    component: monitoring
    tier: observability
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: false
      jsonData:
        timeInterval: "5s"
        queryTimeout: "60s"
        httpMethod: "POST"
    
    - name: PostgreSQL
      type: postgres
      access: proxy
      url: postgresql-primary-service:5432
      database: mental_health_platform
      user: mental_health_app
      secureJsonData:
        password: "${DB_PASSWORD}"
      editable: false
      jsonData:
        sslmode: "require"
        maxOpenConns: 10
        maxIdleConns: 2
        connMaxLifetime: 300

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: mental-health-platform
  labels:
    app: grafana
    component: monitoring
    tier: observability
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 30
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
    
    - name: 'crisis-monitoring'
      orgId: 1
      folder: 'Crisis Management'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: false
      options:
        path: /var/lib/grafana/dashboards/crisis

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: crisis-dashboard
  namespace: mental-health-platform
  labels:
    app: grafana
    component: monitoring
    tier: observability
data:
  crisis-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "üö® Crisis Management Overview",
        "tags": ["crisis", "mental-health", "emergency"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "üö® Active Crisis Count",
            "type": "stat",
            "targets": [
              {
                "expr": "crisis_active_count",
                "legendFormat": "Active Crises"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 5},
                    {"color": "red", "value": 10}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "‚è±Ô∏è Crisis Response Time (P95)",
            "type": "stat",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(crisis_response_duration_seconds_bucket[5m]))",
                "legendFormat": "P95 Response Time"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "s",
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 2},
                    {"color": "red", "value": 5}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "üìû 988 Hotline Connections",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(hotline_connections_total[5m])",
                "legendFormat": "Connections/sec"
              },
              {
                "expr": "rate(hotline_connections_successful[5m])",
                "legendFormat": "Successful/sec"
              },
              {
                "expr": "rate(hotline_connections_failed[5m])",
                "legendFormat": "Failed/sec"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                }
              }
            },
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "üè• Emergency Escalations",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(emergency_escalations_total[5m])",
                "legendFormat": "Total Escalations/sec"
              },
              {
                "expr": "rate(emergency_escalations_successful[5m])",
                "legendFormat": "Successful/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 5,
            "title": "üéØ Crisis Detection Accuracy",
            "type": "stat",
            "targets": [
              {
                "expr": "crisis_detection_accuracy_percentage",
                "legendFormat": "Detection Accuracy"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": null},
                    {"color": "yellow", "value": 90},
                    {"color": "green", "value": 95}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          },
          {
            "id": 6,
            "title": "üìà Crisis Trends (24h)",
            "type": "timeseries",
            "targets": [
              {
                "expr": "increase(crisis_requests_total[1h])",
                "legendFormat": "Hourly Crisis Requests"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 24}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s",
        "schemaVersion": 30,
        "version": 1
      }
    }

  system-health.json: |
    {
      "dashboard": {
        "id": null,
        "title": "üè• System Health & Performance",
        "tags": ["system", "health", "performance"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "üîÑ Application Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job='mental-health-backend'}",
                "legendFormat": "Backend"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "mappings": [
                  {"options": {"0": {"text": "Down", "color": "red"}}, "type": "value"},
                  {"options": {"1": {"text": "Up", "color": "green"}}, "type": "value"}
                ]
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "üíæ Database Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job='postgresql'}",
                "legendFormat": "PostgreSQL"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "mappings": [
                  {"options": {"0": {"text": "Down", "color": "red"}}, "type": "value"},
                  {"options": {"1": {"text": "Up", "color": "green"}}, "type": "value"}
                ]
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "üîÑ Cache Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job='redis'}",
                "legendFormat": "Redis"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "mappings": [
                  {"options": {"0": {"text": "Down", "color": "red"}}, "type": "value"},
                  {"options": {"1": {"text": "Up", "color": "green"}}, "type": "value"}
                ]
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
          },
          {
            "id": 4,
            "title": "üö® Crisis Detector Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job='crisis-detector'}",
                "legendFormat": "Crisis Detection"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "mappings": [
                  {"options": {"0": {"text": "Down", "color": "red"}}, "type": "value"},
                  {"options": {"1": {"text": "Up", "color": "green"}}, "type": "value"}
                ]
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          },
          {
            "id": 5,
            "title": "üìä HTTP Request Rate",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(http_requests_total[5m])",
                "legendFormat": "{{method}} {{status}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 6,
            "title": "‚ö†Ô∏è Error Rate",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(http_requests_total{status=~'5..'}[5m])",
                "legendFormat": "5xx Errors"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 7,
            "title": "üß† Memory Usage",
            "type": "timeseries",
            "targets": [
              {
                "expr": "container_memory_working_set_bytes / container_spec_memory_limit_bytes * 100",
                "legendFormat": "{{container}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 8,
            "title": "‚ö° CPU Usage",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total[5m]) * 100",
                "legendFormat": "{{container}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s",
        "schemaVersion": 30,
        "version": 1
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: mental-health-platform
  labels:
    app: grafana
    component: monitoring
    tier: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: monitoring
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
        tier: observability
    spec:
      securityContext:
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
        runAsNonRoot: true
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: grafana
          containerPort: 3000
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mental-health-secrets
              key: GRAFANA_PASSWORD
              optional: true
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel,grafana-worldmap-panel"
        - name: GF_SECURITY_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: mental-health-secrets
              key: GRAFANA_SECRET_KEY
              optional: true
        - name: GF_DATABASE_TYPE
          value: "postgres"
        - name: GF_DATABASE_HOST
          value: "postgresql-primary-service:5432"
        - name: GF_DATABASE_NAME
          value: "grafana"
        - name: GF_DATABASE_USER
          value: "grafana"
        - name: GF_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mental-health-secrets
              key: GRAFANA_DB_PASSWORD
              optional: true
        - name: GF_DATABASE_SSL_MODE
          value: "require"
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_UPDATES
          value: "false"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_USERS_ALLOW_ORG_CREATE
          value: "false"
        - name: GF_USERS_AUTO_ASSIGN_ORG
          value: "true"
        - name: GF_USERS_AUTO_ASSIGN_ORG_ID
          value: "1"
        - name: GF_USERS_AUTO_ASSIGN_ORG_ROLE
          value: "Viewer"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "false"
        - name: GF_AUTH_DISABLE_LOGIN_FORM
          value: "false"
        - name: GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH
          value: "/var/lib/grafana/dashboards/crisis-overview.json"
        - name: GF_ALERTING_ENABLED
          value: "true"
        - name: GF_ALERTING_EXECUTE_ALERTS
          value: "true"
        - name: GF_LOG_LEVEL
          value: "info"
        - name: GF_FEATURE_TOGGLES_ENABLE
          value: "publicDashboards"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: crisis-dashboard
          mountPath: /var/lib/grafana/dashboards/crisis
          readOnly: true
        livenessProbe:
          httpGet:
            path: /api/health
            port: grafana
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: grafana
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 10
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: crisis-dashboard
        configMap:
          name: crisis-dashboard
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: mental-health-platform
  labels:
    app: grafana
    component: monitoring
    tier: observability
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: grafana
    name: grafana
    protocol: TCP
  selector:
    app: grafana
    component: monitoring

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage-pvc
  namespace: mental-health-platform
  labels:
    app: grafana
    component: monitoring
    tier: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# Ingress for external access to Grafana
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: mental-health-platform
  labels:
    app: grafana
    component: monitoring
    tier: networking
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Mental Health Platform Monitoring'
spec:
  tls:
  - hosts:
    - monitoring.mentalhealthplatform.com
    secretName: monitoring-tls-secret
  
  rules:
  - host: monitoring.mentalhealthplatform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000

---
# Basic auth secret for monitoring access
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: mental-health-platform
  labels:
    app: grafana
    component: monitoring
    tier: security
type: Opaque
data:
  # IMPORTANT: Replace with actual htpasswd generated credentials
  # Generate with: htpasswd -c auth monitoring-user
  # Default: monitoring-user:secure-password-123
  auth: bW9uaXRvcmluZy11c2VyOiRhcHIxJEg2VUFJdTRvJEx1VG9qUmlnV3l3VkpMdXFWbjlNdVZ0dDE=