apiVersion: apps/v1
kind: Deployment
metadata:
  name: mental-health-frontend
  namespace: mental-health-platform
  labels:
    app: mental-health-platform
    component: frontend
    tier: presentation
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: mental-health-platform
      component: frontend
      tier: presentation
  template:
    metadata:
      labels:
        app: mental-health-platform
        component: frontend
        tier: presentation
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "false"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # nginx user
        runAsGroup: 101
        fsGroup: 101
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: https
          containerPort: 443
          protocol: TCP
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: frontend-build
          mountPath: /usr/share/nginx/html
          readOnly: true
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: tls-private
          mountPath: /etc/ssl/private
          readOnly: true
        - name: cache
          mountPath: /var/cache/nginx
        - name: run
          mountPath: /var/run
        - name: log
          mountPath: /var/log/nginx
        livenessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: Host
              value: localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: Host
              value: localhost
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: Host
              value: localhost
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
            - CHOWN
            - SETGID
            - SETUID
      
      initContainers:
      - name: build-frontend
        image: node:20-alpine
        workingDir: /app
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Building frontend application..."
          
          # Copy source code
          cp -r /source/* /app/
          
          # Install dependencies
          npm ci --only=production
          
          # Build the application
          npm run build
          
          # Copy build output to shared volume
          cp -r /app/dist/* /build/
          
          # Set proper permissions
          chown -R 101:101 /build
          
          echo "Frontend build completed successfully"
        env:
        - name: NODE_ENV
          value: production
        - name: VITE_API_URL
          value: "https://api.mentalhealthplatform.com"
        - name: VITE_WS_URL
          value: "wss://api.mentalhealthplatform.com/ws"
        - name: VITE_ENVIRONMENT
          value: "production"
        - name: VITE_SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: mental-health-secrets
              key: SENTRY_DSN
              optional: true
        volumeMounts:
        - name: source-code
          mountPath: /source
          readOnly: true
        - name: frontend-build
          mountPath: /build
        - name: npm-cache
          mountPath: /root/.npm
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
          allowPrivilegeEscalation: true
      
      volumes:
      - name: nginx-config
        configMap:
          name: mental-health-nginx-config
      - name: frontend-build
        emptyDir: {}
      - name: source-code
        configMap:
          name: frontend-source-code
      - name: tls-certs
        secret:
          secretName: mental-health-tls-secret
          items:
          - key: tls.crt
            path: tls.crt
            mode: 0644
      - name: tls-private
        secret:
          secretName: mental-health-tls-secret
          items:
          - key: tls.key
            path: tls.key
            mode: 0600
      - name: cache
        emptyDir: {}
      - name: run
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: npm-cache
        emptyDir:
          medium: Memory
          sizeLimit: 1Gi
      
      terminationGracePeriodSeconds: 30
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - frontend
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values:
                - web
                - general

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: mental-health-platform
  labels:
    app: mental-health-platform
    component: frontend
    tier: presentation
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: https
    protocol: TCP
  selector:
    app: mental-health-platform
    component: frontend
    tier: presentation

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mental-health-ingress
  namespace: mental-health-platform
  labels:
    app: mental-health-platform
    component: ingress
    tier: networking
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    
    # Rate limiting for crisis endpoints
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: https:; font-src 'self'; object-src 'none'; media-src 'self';" always;
    
    # HSTS and other security settings
    nginx.ingress.kubernetes.io/server-snippet: |
      location /api/crisis {
        # Crisis endpoints get priority treatment - no rate limiting
        proxy_pass http://backend-service.mental-health-platform.svc.cluster.local:3001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
      }
    
    # Certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
    
    # Performance
    nginx.ingress.kubernetes.io/enable-brotli: "true"
    nginx.ingress.kubernetes.io/brotli-level: "6"
    nginx.ingress.kubernetes.io/brotli-types: "text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap"

spec:
  tls:
  - hosts:
    - mentalhealthplatform.com
    - www.mentalhealthplatform.com
    - api.mentalhealthplatform.com
    secretName: mental-health-tls-secret
  
  rules:
  - host: mentalhealthplatform.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3002
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  
  - host: www.mentalhealthplatform.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3002
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  
  - host: api.mentalhealthplatform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: mental-health-platform
  labels:
    app: mental-health-platform
    component: frontend
    tier: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mental-health-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: frontend-pdb
  namespace: mental-health-platform
  labels:
    app: mental-health-platform
    component: frontend
    tier: presentation
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: mental-health-platform
      component: frontend
      tier: presentation