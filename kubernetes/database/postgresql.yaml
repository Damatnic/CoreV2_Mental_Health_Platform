apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-primary-pvc
  namespace: mental-health-platform
  labels:
    app: postgresql
    component: database
    tier: data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-backup-pvc
  namespace: mental-health-platform
  labels:
    app: postgresql
    component: backup
    tier: data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-primary
  namespace: mental-health-platform
  labels:
    app: postgresql
    component: database
    tier: data
    role: primary
spec:
  serviceName: postgresql-primary-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      role: primary
  template:
    metadata:
      labels:
        app: postgresql
        component: database
        tier: data
        role: primary
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgresql
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgresql
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          value: mental_health_platform
        - name: POSTGRES_USER
          value: mental_health_app
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mental-health-secrets
              key: DB_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8 --auth-host=scram-sha-256"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: scram-sha-256
        - name: POSTGRES_SHARED_PRELOAD_LIBRARIES
          value: "pg_stat_statements"
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
          subPath: pgdata
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgresql-init
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U mental_health_app -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U mental_health_app -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      # PostgreSQL Exporter for Prometheus monitoring
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.12.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://mental_health_app:$(POSTGRES_PASSWORD)@localhost:5432/mental_health_platform?sslmode=require"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mental-health-secrets
              key: DB_PASSWORD
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: postgresql-data
        persistentVolumeClaim:
          claimName: postgresql-primary-pvc
      - name: postgresql-config
        configMap:
          name: postgresql-config
      - name: postgresql-init
        configMap:
          name: postgresql-init-scripts
      
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-primary-service
  namespace: mental-health-platform
  labels:
    app: postgresql
    component: database
    tier: data
    role: primary
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: metrics
    protocol: TCP
  selector:
    app: postgresql
    role: primary

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-primary-headless
  namespace: mental-health-platform
  labels:
    app: postgresql
    component: database
    tier: data
    role: primary
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
    protocol: TCP
  selector:
    app: postgresql
    role: primary

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: mental-health-platform
  labels:
    app: postgresql
    component: database
    tier: data
data:
  postgresql.conf: |
    # HIPAA Compliant PostgreSQL Configuration
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    superuser_reserved_connections = 3
    
    # Memory Settings
    shared_buffers = 1GB
    effective_cache_size = 3GB
    work_mem = 16MB
    maintenance_work_mem = 256MB
    
    # Checkpoint Settings
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    
    # Logging Settings (HIPAA Requirement)
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_file_mode = 0600
    log_truncate_on_rotation = on
    log_rotation_age = 1d
    log_rotation_size = 100MB
    
    # Log all connections and disconnections
    log_connections = on
    log_disconnections = on
    
    # Log all DDL statements (HIPAA requirement for audit trail)
    log_statement = 'ddl'
    
    # Log all authentication attempts
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    
    # Security Settings
    ssl = on
    ssl_ciphers = 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256'
    ssl_prefer_server_ciphers = on
    ssl_min_protocol_version = 'TLSv1.2'
    
    # Encryption at rest (requires encrypted storage volume)
    # This is handled at the storage level in Kubernetes
    
    # Performance Extensions
    shared_preload_libraries = 'pg_stat_statements'
    
    # Crisis Detection Performance Optimization
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Backup and Recovery
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    wal_keep_size = 1GB
    
    # Monitoring
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = all

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init-scripts
  namespace: mental-health-platform
  labels:
    app: postgresql
    component: database
    tier: data
data:
  00-init-extensions.sql: |
    -- Enable required extensions for mental health platform
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "citext";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- HIPAA Compliance: Create audit schema
    CREATE SCHEMA IF NOT EXISTS audit;
    
    -- Crisis detection optimization indexes
    -- These will be created by the application migration scripts
  
  01-security-setup.sql: |
    -- HIPAA Security Setup
    
    -- Revoke public schema permissions
    REVOKE CREATE ON SCHEMA public FROM PUBLIC;
    REVOKE ALL ON DATABASE mental_health_platform FROM PUBLIC;
    
    -- Create application user with limited privileges
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'mental_health_app') THEN
            CREATE ROLE mental_health_app WITH LOGIN;
        END IF;
    END
    $$;
    
    -- Grant necessary permissions to application user
    GRANT CONNECT ON DATABASE mental_health_platform TO mental_health_app;
    GRANT USAGE ON SCHEMA public TO mental_health_app;
    GRANT CREATE ON SCHEMA public TO mental_health_app;
    
    -- Set secure defaults
    ALTER DATABASE mental_health_platform SET log_statement = 'all';
    ALTER DATABASE mental_health_platform SET log_min_duration_statement = 1000;
    
  02-hipaa-audit.sql: |
    -- HIPAA Audit Trail Setup
    
    CREATE OR REPLACE FUNCTION audit.audit_trigger() RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO audit.logged_actions (
            schema_name, table_name, user_name, action, original_data, 
            new_data, query, changed_fields, action_timestamp
        ) VALUES (
            TG_TABLE_SCHEMA::TEXT, TG_TABLE_NAME::TEXT, session_user::TEXT, 
            TG_OP, row_to_json(OLD), row_to_json(NEW), 
            current_query(), 
            CASE WHEN TG_OP = 'UPDATE' THEN 
                (SELECT string_agg(col, ',') FROM (
                    SELECT key as col FROM jsonb_each(row_to_json(NEW)::jsonb)
                    WHERE row_to_json(NEW)::jsonb -> key != row_to_json(OLD)::jsonb -> key
                ) t)
            ELSE NULL END,
            now()
        );
        
        IF TG_OP = 'DELETE' THEN
            RETURN OLD;
        ELSE
            RETURN NEW;
        END IF;
    END;
    $$ LANGUAGE plpgsql SECURITY DEFINER;
    
    -- Create audit table if it doesn't exist
    CREATE TABLE IF NOT EXISTS audit.logged_actions (
        event_id BIGSERIAL PRIMARY KEY,
        schema_name TEXT NOT NULL,
        table_name TEXT NOT NULL,
        user_name TEXT NOT NULL,
        action TEXT NOT NULL,
        original_data JSONB,
        new_data JSONB,
        query TEXT,
        changed_fields TEXT,
        action_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
    );
    
    -- Create indexes for audit queries
    CREATE INDEX IF NOT EXISTS logged_actions_timestamp_idx ON audit.logged_actions(action_timestamp);
    CREATE INDEX IF NOT EXISTS logged_actions_table_idx ON audit.logged_actions(schema_name, table_name);
    CREATE INDEX IF NOT EXISTS logged_actions_user_idx ON audit.logged_actions(user_name);

---
# Automated backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgresql-backup
  namespace: mental-health-platform
  labels:
    app: postgresql
    component: backup
    tier: data
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            command:
            - /bin/sh
            - -c
            - |
              set -e
              BACKUP_FILE="mental_health_backup_$(date +%Y%m%d_%H%M%S).sql"
              
              echo "Starting backup: $BACKUP_FILE"
              
              PGPASSWORD="$POSTGRES_PASSWORD" pg_dump \
                -h postgresql-primary-service \
                -U mental_health_app \
                -d mental_health_platform \
                --verbose \
                --no-password \
                --format=custom \
                --compress=9 \
                --file="/backup/$BACKUP_FILE"
              
              echo "Backup completed successfully: $BACKUP_FILE"
              
              # Cleanup old backups (keep last 30 days)
              find /backup -name "mental_health_backup_*.sql" -mtime +30 -delete
              
              echo "Backup cleanup completed"
            env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mental-health-secrets
                  key: DB_PASSWORD
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "1Gi"
                cpu: "500m"
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: postgresql-backup-pvc